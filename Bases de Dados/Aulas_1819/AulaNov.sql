/* FICHA08 */
--EX 1--
CREATE TABLE AUTORES2 (
  CODIGO_AUTOR NUMBER(4) CONSTRAINT PK_AUTORES2 PRIMARY KEY,
  NOME VARCHAR(30) NOT NULL 
                  CONSTRAINT CK_NOME_MAIS CHECK(NOME=UPPER(NOME)),
  N_CONTRIBUINTE NUMBER (9) NOT NULL CONSTRAINT UK_NIF UNIQUE,
  MORADA VARCHAR (50),
  IDADE NUMBER (4) 
        CONSTRAINT CK_IDADE CHECK(IDADE>0 AND IDADE<200),
  SEXO CHAR (1) CHECK(SEXO IN('F', 'M')),
  NACIONALIDADE VARCHAR (20),
  GENERO_PREFERIDO VARCHAR (20)
  );


--EX 2--
CREATE TABLE AVALIACOES (
  CODIGO_CLIENTE NUMBER (4) ,
  CODIGO_LIVRO NUMBER (4),
  NOTA NUMBER (1) CONSTRAINT CK_NOTA CHECK(NOTA>=1 AND NOTA<=5),
  CONSTRAINT PK_AVALIACOES PRIMARY KEY (CODIGO_LIVRO, CODIGO_CLIENTE),
  CONSTRAINT FK_AVAL_LIVRO FOREIGN KEY (CODIGO_LIVRO) 
                                  REFERENCES LIVROS (CODIGO_LIVRO),
  CONSTRAINT FK_AVAL_CLIENTE FOREIGN KEY (CODIGO_CLIENTE) 
                                  REFERENCES CLIENTES (CODIGO_CLIENTE)
);


--EX 3--
CREATE TABLE LIVROS_BACKUP AS
  SELECT CODIGO_LIVRO,
  CODIGO_EDITORA,
  CODIGO_AUTOR,
  TITULO,
  ISBN,
  UPPER(GENERO) AS GENERO,
  PRECO_TABELA,
  PAGINAS,
  QUANT_EM_STOCK,
  UNIDADES_VENDIDAS,
  DATA_EDICAO
FROM LIVROS ;

--EX 4--
ALTER TABLE LIVROS_BACKUP
     ADD CONSTRAINT PK_LIVRO_BACKUP PRIMARY KEY (CODIGO_LIVRO);
     
ALTER TABLE LIVROS_BACKUP
     ADD CONSTRAINT KEY_LIVBK_AUTORES FOREIGN KEY(CODIGO_AUTOR)
     REFERENCES AUTORES (CODIGO_AUTOR);
     
ALTER TABLE LIVROS_BACKUP
     ADD CONSTRAINT KEY_LIVBK_EDITORAS FOREIGN KEY(CODIGO_EDITORA)
     REFERENCES EDITORAS (CODIGO_EDITORA);
     
ALTER TABLE LIVROS_BACKUP
     ADD CONSTRAINT CK_GENERO_MAIS CHECK(GENERO = UPPER (GENERO));


--EX 5--
INSERT INTO LIVROS_BACKUP VALUES (51, 
                                (SELECT CODIGO_EDITORA FROM EDITORAS WHERE NOME LIKE 'FCA%'),
                                (SELECT CODIGO_AUTOR FROM AUTORES WHERE NOME ='Sérgio Sousa'),
                                  'Informática para todos', 132434, 'INFORMÁTICA', 24, 430, NULL, 0, SYSDATE); 
                                  
--EX 6--
INSERT INTO AUTORES2 VALUES (45, 'JOSÉ DE MAGALHÃES', 77665544, NULL, NULL, NULL, NULL, NULL);
 -- OU --
INSERT INTO AUTORES2 (CODIGO_AUTOR, NOME, N_CONTRIBUINTE)
  VALUES (45, 'JOSÉ DE MAGALHÃES', 77665544);
  
--EX 7--
DELETE FROM LIVROS_BACKUP
WHERE CODIGO_LIVRO = 51;

--EX 8--
UPDATE LIVROS_BACKUP SET PRECO_TABELA = PRECO_tABELA * 1.1
WHERE GENERO = 'AVENTURA';

--EX 9--
DELETE FROM LIVROS_BACKUP
WHERE GENERO = 'INFORMÁTICA'
AND PRECO_TABELA < (SELECT AVG(PRECO_TABELA)
                    FROM LIVROS_BACKUP
                    WHERE GENERO='INFORMÁTICA');

--EX 10-- 
CREATE TABLE AUTORES_BACKUP AS 
  SELECT *
  FROM AUTORES;
  
--EX 11--
ALTER TABLE AUTORES_BACKUP
    ADD CONSTRAINT CK_NLIVROS CHECK (NLIVROS >=0 AND NLIVROS <=150);
    
--- ou ---
ALTER TABLE AUTORES_BACKUP
    ADD (NLIVROS NUMBER DEFAULT 0 NOT NULL);
    
ALTER TABLE AUTORES_BACKUP
    ADD (NLIVROS NUMBER DEFAULT 0 NOT NULL
      CONSTRAINT CK_NLIVROS CHECK (NLIVROS >=0 AND NLIVROS <=150));
      
--EX 12--
UPDATE AUTORES_BACKUP 
      SET NLIVROS = (SELECT COUNT (*) 
                    FROM LIVROS 
                    WHERE CODIGO_AUTOR = AUTORES_BACKUP.CODIGO_AUTOR);
              
--EX 13--
UPDATE AUTORES_BACKUP SET GENERO_PREFERIDO = (
                      SELECT GENERO 
                      FROM LIVROS
                      WHERE LIVROS.CODIGO_AUTOR = AUTORES_BACKUP.CODIGO_AUTOR
                      AND ROWNUM = 1
                      GROUP BY CODIGO_AUTOR, GENERO
                      HAVING (CODIGO_AUTOR, COUNT (*)) IN (
                              SELECT CODIGO_AUTOR, MAX(NLIVROS) AS MAXIMO
                              FROM (SELECT CODIGO_AUTOR, GENERO, COUNT (*) NLIVROS
                                    FROM LIVROS
                                    GROUP BY CODIGO_AUTOR, GENERO)
                      GROUP BY CODIGO_AUTOR));
                      
--EX 14--
CREATE TABLE EDITORAS_BACKUP AS
SELECT *
FROM EDITORAS;

--EX 15--
DROP TABLE EDITORAS_BACKUP;

--ex a--
ALTER TABLE LIVROS_BACKUP
ADD (EDICAO NUMBER(7));

--ex b--
UPDATE LIVROS_BACKUP SET UNIDADES_VENDIDAS = (
                      SELECT SUM(QUANTIDADE)
                      FROM VENDAS 
                      WHERE VENDAS.CODIGO_LIVRO = LIVROS_BACKUP.CODIGO_LIVRO);

--ex d--
CREATE TABLE VENDAS_BACKUP AS
SELECT *
FROM VENDAS;

--ex c--
UPDATE VENDAS_BACKUP 
  SET TOTAL_VENDA = QUANTIDADE*PRECO_UNITARIO;
  
--ex e--
DELETE FROM VENDAS_BACKUP
  WHERE TO_CHAR(DATA_VENDA, 'MM') = '01';
  
--ex f--
DELETE FROM VENDAS_BACKUP 
  WHERE CODIGO_LIVRO IN (SELECT CODIGO_LIVRO
                      FROM LIVROS, AUTORES
                      WHERE LIVROS.CODIGO_AUTOR=AUTORES.CODIGO_AUTOR
                      AND NOME='Sérgio Sousa'
                      AND PRECO_TABELA=(SELECT MAX(PRECO_TABELA)
                                        FROM LIVROS, AUTORES
                                        WHERE LIVROS.CODIGO_AUTOR=AUTORES.CODIGO_AUTOR
                                        AND NOME='Sérgio Sousa'));
                                        

--O TÍTULO DO LIVRO MAIS CARO DE CADA AUTOR--
--OUTPUT: NOME_AUTOR, TITULO
SELECT TITULO, NOME
FROM LIVROS,  AUTORES, (SELECT NOME, MAX(PRECO_TABELA) MAXIMO
                        FROM LIVROS L, AUTORES A
                        WHERE L.CODIGO_AUTOR = A.CODIGO_AUTOR) X
WHERE LIVROS.CODIGO_AUTOR = AUTORES.CODIGO_AUTOR
AND AUTORES.NOME = X.NOME 
AND PRECO_TABELA = X.MAXIMO;


      

/* FICHA 09 */
--EX 1--
Sql> create sequence exp_sequencia; // cria vista
Sql> select exp_sequencia.currval from dual; --imprime 1
Sql> select exp_sequencia.nextval from dual; --imprime 2 
Sql> select exp_sequencia.nextval from dual; --imprime 3
Sql> select exp_sequencia.nextval from dual; --imprime 4
Sql> select exp_sequencia.currval from dual; --imprime 4
Sql> drop sequence exp_sequencia; --apaga a sequencia 2

--EX 2--
CREATE TABLE EDITORAS_BACKUP AS SELECT * 
FROM EDITORAS;

ALTER TABLE EDITORAS_BACKUP
ADD CONSTRAINT PK_EDIT_BACK PRIMARY KEY(CODIGO_EDITORA)
ADD CONSTRAINT UK_NOME_EDITORA UNIQUE(NOME);

--EX 3--
CREATE SEQUENCE seq_editback START WITH 4 INCREMENT BY 1;

--  OU  --
CREATE SEQUENCE seq_editback START WITH 4;
CREATE SEQUENCE seq_editback START WITH 4 INCREMENT BY 1
NOCLYCLE NOMEXVALUE;

--EX 4--
INSERT INTO EDITORAS_BACKUP(CODIGO_EDITORA, NOME, N_CONTRIBUINTE, MORADA, TELEFONE, FAX) VALUES(SEQ_EDITBACK.NEXTVAL,'D.Quixote', 901111111, 'Rua Cidade de Córdova, n.2  2610-038 Alfragide', 707252252, 707252253);
INSERT INTO EDITORAS_BACKUP(CODIGO_EDITORA, NOME, N_CONTRIBUINTE, MORADA, TELEFONE, FAX) VALUES(SEQ_EDITBACK.NEXTVAL,'Almedina', 901212121, 'Rua Fernandes Tomás, n.º 76 a 80, 3000-167 Coimbra', 707252252, 239851904);

ALTER TABLE EDITORAS_BACKUP 
  MODIFY (MORADA VARCHAR(70));
  

--EX 5--
SELECT seq_editback.CURRVAL FROM DUAL;
SELECT seq_editback.NEXTVAL FROM DUAL; 

SELECT seq_editback.CURRVAL FROM DUAL: --confirma o seu valor atual

--SELECT seq_editback.CURRVAL FROM LIVROS;
--SELECT seq_editback.NEXTVAL FROM LIVROS;

--EX 6--    
DROP SEQUENCE seq_editback;

--EX 7--
CREATE VIEW LIVROS_INFORMATICA AS
  SELECT * FROM LIVROS
  WHERE GENERO = 'Informática';
  
--EX 8--
insert into livros_informatica (codigo_livro, titulo, isbn, genero)
values (30,'Uma noite de Verão', 8000000001,'Informática');

insert into livros_informatica (codigo_livro, titulo,isbn, genero)
values (31,'O céu é azul',8000000002,'Romance');

insert into livros (codigo_livro, codigo_editora, codigo_autor,titulo,isbn, genero)
values (32,2, 2,'Longe de tudo',8000000003,'Informática');

--EX 9--
DELETE FROM LIVROS
WHERE CODIGO_LIVRO IN (30, 31, 32);

--EX 10-- 
DROP VIEW LIVROS_INFORMATICA;

--EX 11--
CREATE TABLE LIVROS_BACKUP AS SELECT * FROM LIVROS;

--EX 12--
CREATE VIEW AUTOR_LIVRO AS
        SELECT UPPER(NOME) NOME, UPPER(TITULO) TITULO
        FROM AUTORES, LIVROS_BACKUP
        WHERE AUTORES.CODIGO_AUTOR = LIVROS_BACKUP.CODIGO_AUTOR;
        
--EX 13--
SELECT * FROM AUTOR_LIVRO;

DELETE FROM AUTOR_LIVRO;

SELECT * FROM AUTOR_LIVRO;

--EX 14--
DROP TABLE LIVROS_BACKUP;

--EX 15--
CREATE VIEW LIVROS_VENDIDOS AS 
    SELECT TITULO, AUTORES.NOME, SUM(QUANTIDADE) AS NLIVROS
    FROM LIVROS, AUTORES, VENDAS
    WHERE AUTORES.CODIGO_AUTOR = LIVROS.CODIGO_AUTOR
    AND LIVROS.CODIGO_LIVRO = VENDAS.CODIGO_LIVRO
    GROUP BY TITULO, NOME
    ORDER BY 3 DES;
--EX 16--
