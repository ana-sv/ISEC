/* FICHA01 */
--EX 1--
SELECT * 
FROM AUTORES;

--EX 2--
SELECT TITULO
FROM LIVROS;

--EX 3--
SELECT DISTINCT GENERO
FROM LIVROS;

--EX 4--
 SELECT TITULO 
 FROM LIVROS 
 WHERE PRECO_TABELA BETWEEN 25 AND 35;
 
--EX 5--
 SELECT CODIGO_LIVRO, TITULO
 FROM LIVROS 
 WHERE GENERO LIKE 'Informática';
 
--EX 6--
SELECT TITULO
FROM LIVROS
WHERE GENERO LIKE 'Policial' 
AND PAGINAS > 500;

--EX 7--
SELECT DISTINCT GENERO
FROM LIVROS
WHERE PAGINAS > 700
OR PRECO_TABELA > 45;

--EX 8--
SELECT TITULO, GENERO, PRECO_TABELA 
FROM LIVROS
WHERE GENERO LIKE 'Informática'
ORDER BY PRECO_TABELA DESC;

--EX 9--
SELECT ISBN, TITULO, PRECO_TABELA, QUANT_EM_STOCK
FROM LIVROS
WHERE GENERO LIKE 'Informática'
ORDER BY PRECO_TABELA DESC, QUANT_EM_STOCK;

--EX 10--
SELECT CODIGO_AUTOR
FROM LIVROS 
WHERE QUANT_EM_STOCK  > 0;

--EX 11--
SELECT TITULO, GENERO
FROM LIVROS 
WHERE GENERO <> 'Policial';

--EX 12--
SELECT TITULO 
FROM LIVROS
WHERE GENERO NOT IN ('Policial');

--EX 13--
SELECT NOME
FROM AUTORES 
WHERE IDADE > 30 AND GENERO_PREFERIDO LIKE 'Policial'
ORDER BY NOME;

--EX 14--
SELECT NOME
FROM AUTORES
WHERE NOME LIKE '%r%' AND NOME LIKE '%d%';

--EX 15--
SELECT TITULO
FROM LIVROS 
WHERE TITULO LIKE 'O%st%' or TITULO LIKE 'M%to%';

--EX 16--
SELECT TITULO
FROM LIVROS
WHERE GENERO LIKE 'Policial' 
OR GENERO LIKE 'Romance'
OR GENERO LIKE 'Aventura';

--EX 17--
----------------------------------------------

/* FICHA02 */
--EX 1--
SELECT LIVROS.TITULO
FROM LIVROS, AUTORES
WHERE GENERO = 'Policial'
AND AUTORES.NOME = 'Cláudio Tereso'
AND LIVROS.CODIGO_AUTOR = AUTORES.CODIGO_AUTOR;

--EX 2--
SELECT LIVROS.TITULO
FROM LIVROS, AUTORES
WHERE GENERO ='Policial'
AND AUTORES.MORADA LIKE '%Coimbra'
AND LIVROS.CODIGO_AUTOR = AUTORES.CODIGO_AUTOR;

--EX 3--
SELECT DISTINCT NOME
FROM LIVROS, AUTORES
WHERE GENERO_PREFERIDO = GENERO
AND LIVROS.CODIGO_AUTOR = AUTORES.CODIGO_AUTOR;

--EX 4--
SELECT TITULO, PRECO_TABELA
FROM CLIENTES, VENDAS, LIVROS
WHERE CLIENTES.MORADA LIKE '%Coimbra'
AND CLIENTES.CODIGO_CLIENTE = VENDAS.CODIGO_CLIENTE
AND VENDAS.CODIGO_LIVRO = LIVROS.CODIGO_LIVRO;

--EX 5--
SELECT DISTINCT AUTORES.NOME
FROM CLIENTES, AUTORES, VENDAS
WHERE CLIENTES.CODIGO_CLIENTE = VENDAS.CODIGO_CLIENTE
AND AUTORES.N_CONTRIBUINTE = CLIENTES.N_CONTRIBUINTE;

--EX 6--
SELECT NOME "NOME DO AUTOR", TITULO, GENERO
FROM LIVROS, AUTORES
WHERE LIVROS.CODIGO_AUTOR = AUTORES.CODIGO_AUTOR
AND GENERO != GENERO_PREFERIDO;

--EX 7--
SELECT TITULO, PRECO_TABELA* 0.3 * UNIDADES_VENDIDAS "Rendeu"
FROM LIVROS;

--EX 8--
SELECT TITULO, PRECO_TABELA* 0.3 * UNIDADES_VENDIDAS "Rendimento"
FROM LIVROS
WHERE PRECO_TABELA* 0.3 * UNIDADES_VENDIDAS > 10000;

--EX 9--
SELECT TITULO "Titulo", 
  ROUND(PRECO_TABELA / PAGINAS ,2) "Custo por página",
  CEIL(PRECO_TABELA / PAGINAS ) "Custo página sup",
  FLOOR(PRECO_TABELA / PAGINAS ) "Custo página inf"
FROM LIVROS
WHERE PAGINAS BETWEEN 400 AND 700
ORDER BY PRECO_TABELA / PAGINAS;
--ORDER BY "Custo por página"

--EX 10--
SELECT UPPER (TITULO) "Titulo (em maiusculas)",
      LOWER (TITULO) "Titulo (em minusculas)",
      INITCAP (TITULO) "Titulo (1ª letra)"
FROM LIVROS;

--EX 11--
SELECT TITULO "Titulo"
FROM LIVROS
WHERE UPPER(GENERO) = 'INFORMÁTICA';
--WHERE LOWER(GENERO) = 'informática';
--WHERE LOWER(GENERO) = LOWER('INFormática');

--EX 12--
SELECT NOME, 
      SUBSTR(NOME, 1, INSTR(NOME, ' ')-1),
      SUBSTR(NOME, INSTR(NOME,' ',-1)+1)
FROM AUTORES;

/* FICHA03 */
--EX 1-- 
SELECT TITULO 
FROM LIVROS
WHERE '2011' = TO_CHAR(DATA_EDICAO, 'YYYY');

--EX 2--
SELECT TO_CHAR(SYDATE, 'HH24:MI:SS') "Hora Atual",
        TO_CHAR(SYDATE, 'DD, Month, YYYY') "Data atual"
FROM DUAL;

--EX 3--
SELECT TITULO "Titulo", PRECO_TABELA "Preço"
FROM LIVROS
-- WHERE DATA_EDICAO > SYSDATE -80; --
WHERE SYSDATE - DATA_EDICAO < 80;        

--EX 4--
SELECT DISTINCT TITULO
FROM LIVROS, CLIENTES, VENDAS
-- WHERE TO_CHAR(DATA_VENDA, 'DD-MM-YYY') >= '01-08-2013'--
--WHERE DATA_VENDA >= TO_DATE('01-08-2013', 'DD-MM-YYYY')
--AND DATA_VENDA < TO_DATE('01-10-2013', 'DD-MM-YYYY')
WHERE TO_CHAR(DATA_VEND, 'YYYY-MM') IN ('2013-08', '2013-09')
AND MORADA LIKE '%Lisboa'
AND LIVROS.CODIGO_LIVRO = VENDAS.CODIGO_LIVRO
AND VENDAS.CODIGO_CLIENTE = CLIENTES.CODIGO_CLIENTE;

--EX 5--
SELECT TITULO "Titulo", DATA_VENDA "Data compra", DATA_EDICAO "Data edição"
FROM LIVROS,VENDAS
WHERE LIVROS.CODIGO_LIVRO = VENDAS.CODIGO_LIVRO
AND UPPER(GENERO) = 'INFORMÁTICA'
AND TO_CHAR(DATA_VENDA, 'MM-YYYY') = TO_CHAR(DATA_EDICAO, 'MM-YYYY');

--EX 6-- 
SELECT NOME, DATA_EDICAO "Edidato em"
FROM AUTORES, LIVROS
WHERE UPPER(LIVROS.GENERO) = 'INFORMÁTICA'
AND LIVROS.PAGINA > 190
AND TO_CHAR(DATA_EDICAO, 'DD-MM-YYYY') >= '21.06.2013'
AND TO_CHAR(DATA_EDICAO, 'DD.MM.YYYY') <= '22.09.2013'
AND LIVROS.CODIGO_AUTOR = AUTORES.CODIGO_AUTOR;

--EX 7--
SELECT TITULO,
      TRUNC((SYSDATE- DATA_EDICAO) / 365,0) N_ANOS,
      FLOOR(MONTHS_BETWEEN(SYSDATE, DATA_EDICAO) / 12) N_ANOS
FROM LIVROS;

--EX 8--
SELECT DISTINCT NOME
FROM CLIENTES, VENDAS, LIVROS
WHERE LIVROS.CODIGO_LIVRO = VENDAS.CODIGO_LIVRO
AND VENDAS.CODIGO_CLIENTE = CLIENTES.CODIGO_CLIENTE
AND UPPER(GENERO) = 'INFORMÁTICA'
AND TO_CHAR(DATA_VENDA, 'D') = 3 -- TERÇA FEIRA 
AND TO_CHAR(DATA_VENDA, 'DD') <= 7 -- 1ª TERÇA FEIRA 
AND TO_CHAR(DATA_VENDA, 'HH24') < 17; -- HORAS

--EX 9-- 
SELECT NOME 
FROM AUTORES
MINUS
SELECT DISTINCT NOME
FROM AUTORES, LIVROS
WHERE LIVROS.CODIGO_AUTOR = AUTORES.CODIGO_AUTOR;

--EX 10--
SELECT NOME 
FROM AUTORES
MINUS
SELECT DISTINCT NOME
FROM AUTORES, LIVROS
WHERE LIVROS.CODIGO_AUTOR = AUTORES.CODIGO_AUTOR
AND TO_CHAR(DATA_EDICAO, 'YYYY') != 
    TO_CHAR(SYSDATE    , 'YYYY');


/* FICHA04 */
--EX 1--
SELECT COUNT(GENERO) AS "Total de livros Informática"
FROM LIVROS
WHERE UPPER(GENERO) = 'INFORMÁTICA';

--EX 2--
SELECT COUNT(TITULO) AS "Total de Livros", 
       ROUND(AVG(PRECO_TABELA),1) AS "Preço médio" , 
       SUM(UNIDADES_VENDIDAS) AS "Total de Livros Vendidos"
FROM LIVROS;

--EX 3--
SELECT GENERO "Género", COUNT(TITULO) "Quantidade"
FROM LIVROS
GROUP BY GENERO
ORDER BY GENERO;

--EX 4--
SELECT TITULO TÍTULO, 
       MIN(PRECO_UNITARIO) P_MAIS_BAIXO, 
       MAX(PRECO_UNITARIO) P_MAIS_ALTO, 
       ROUND(AVG(PRECO_UNITARIO),2) P_MEDIO
FROM LIVROS L, VENDAS V
WHERE L.CODIGO_LIVRO = V.CODIGO_LIVRO
AND UPPER(GENERO) = 'INFORMÁTICA'
GROUP BY TITULO;

--EX 5--
SELECT GENERO, MAX(PRECO_TABELA) - MIN(PRECO_TABELA) "Diferença"
FROM LIVROS
GROUP BY GENERO;

--EX 6-- 
SELECT DISTINCT TITULO, PRECO_TABELA PRECO, 
       SUM(V.QUANTIDADE) NUM_VENDIDOS,
       SUM(PRECO_TABELA*V.QUANTIDADE) REC_ESPERADA,
       SUM(V.PRECO_UNITARIO*V.QUANTIDADE) REC_EFECTIVA
FROM LIVROS L, VENDAS V
WHERE L.CODIGO_LIVRO = V.CODIGO_LIVRO
GROUP BY PRECO_TABELA, TITULO;

--EX 7--
SELECT GENERO,
       CEIL(AVG(PRECO_TABELA)) "Preço médio" -- arrendonda o valor para cima 
FROM LIVROS 
GROUP BY GENERO 
HAVING COUNT(TITULO) > 4
ORDER BY 2 ASC;

--EX 8--
SELECT NOME, MIN(PRECO_TABLEA) "Preço mínimo"
FROM LIVROS, AUTORES
WHERE AUTORES.CODIGO_AUTOR = LIVROS.CODIGO_AUTOR
GROUP BY NOME
HAVING MIN(LIVROS.PRECO_TABELA) >= 30
ORDER BY 2;

--EX 9-- 
SELECT CLIENTES.CODIGO_CLIENTE, CLIENTES.NOME
       SUM(QUANTIDADE) NUM_LIVROS,
       ROUND(AVG(RPECO_UNITARIO),2) PRECO_MEDIO,
       COUNT(DISTINCT LIVROS.CODIGO_AUTOR)
FROM CLIENTES, VENDAS, LIVROS
WHERE VENDAS.CODIGO_CLIENTE = CLIENTES.CODIGO_CLIENTE
AND VENDAS.CODIGO_LIVRO = LIVROS.CODIGO_LIVRO
AND MORADA LIKE '%Lisboa' 
GROUP BY CLIENTES.CODIGO_CLIENTE, CLIENTES.NOME
HAVING SUM(QUANTIDADE) > 3
AND COUNT(DISTINCT LIVROS.CODIGO_EDITORA) = 1;

--EX 10-- 
SELECT AUTORES.NOME, ''||COUNT(LIVROS.CODIGO_LIVRO) "Nº LIVROS" -- string vazia; caracter com nr
FROM AUTORES, LIVROS
WHERE AUTORES.CODIGO_AUTOR = LIVROS.CODIGO_AUTOR
GROUP BY NOME                   -- foram os que escreveram = 15 autores
UNION 
SELECT NOME, 'NENHUM'           -- todos os que escreveram 
FROM AUTORES
MINUS 
SELECT NOME, 'NENHUM'           -- menos os que escreveram
FROM AUTORES, LIVROS
WHERE AUTORES.CODIGO_AUTOR = LIVROS.CODIGO_AUTOR
ORDER BY 1;
-- OU -- 
SELECT NOME, DECODE(COUNT(TITULO), 0, 'NENHUM', COUNT(*)) "Nº LIVROS"
FROM LIVROS, AUTORES 
WHERE AUTORES.CODIGO_AUTOR = LIVROS.CODIGO_AUTOR (+) -- outer join; todos os autores que tem livros ou não
GROUP BY NOME
ORDER BY 1;


/* FICHA05 */

--EX 1--
--1.a)--
SELECT TITULO, PRECO_TABELA
FROM LIVROS
WHERE PRECO_TABELA = 
                    ( SELECT MAX(PRECO_TABELA)
                      FROM LIVROS
                      WHERE GENERO = 'Informática')
AND GENERO = 'Informática';

--1.b)--
SELECT TITULO, PRECO_TABELA
FROM LIVROS
WHERE PRECO_TABELA >= ALL 
                    ( SELECT PRECO_TABELA   -- TITULO, PRECO_TABLEA: devolve duas tabelas X
                      FROM LIVROS
                      WHERE GENERO = 'Informática' )
AND GENERO = 'Informática';
                      
--1.c)--
SELECT TITULO, PRECO_TABELA
FROM LIVROS
WHERE NOT EXISTS               
                ( SELECT TITULO, PRECO_TABELA -- não dá erro porque o exists não quer saber o q retorna (colunas, linhas) 
                  FROM LIVROS L
                  WHERE LIVROS.PRECO_TABELA > L.PRECO_TABELA 
                  AND GENERO = 'Informática' )
AND GENERO = 'Informática';
                  
--1.d)--
SELECT TITULO, PRECO_TABELA
FROM LIVROS L,  ( SELECT MAX(PRECO_TABELA) AS MAXIMO
                  FROM LIVROS 
                  WHERE GENERO = 'Informática') T
WHERE PRECO_TABELA = MAXIMO
AND GENERO = 'Informática';

--EX 2--
SELECT DISTINCT AUTORES.NOME
FROM AUTORES, LIVROS
WHERE PAGINAS > 
              ( SELECT AVG(PAGINAS)
                FROM LIVROS)
AND AUTORES.CODIGO_AUTOR = LIVROS.CODIGO_AUTOR; 

-- modo simples de fazer-- 
SELECT DISTINCT NOME
FROM AUTORES, LIVROS
WHERE AUTORES.CODIGO_AUTOR = LIVROS.CODIGO_AUTOR
AND PAGINAS > 100;

SELECT AVG(PAGINAS)
FROM LIVROS);
---------------------------

--EX 3--
SELECT NOME
FROM AUTORES, LIVROS
WHERE AUTORES.CODIGO_AUTOR = LIVROS.CODIGO_AUTOR
GROUP BY NOME
HAVING COUNT(TITULO) > (SELECT AVG (NLIVROS) MEDIA
                        FROM (SELECT CODIGO_AUTOR, COUNT(*) NLIVROS
                              FROM LIVROS
                              GROUP BY CODIGO_AUTOR) TAB1);
                 
-- modo simples de fazer-- 
SELECT NOME
FROM AUTORES, LIVROS
WHERE AUTORES.CODIGO_AUTOR = LIVROS.CODIGO_AUTOR
GROUP BY NOME
HAVING COUNT(TITULO) >2.3;

SELECT AVG (NLIVROS) MEDIA
FROM (SELECT CODIGO_AUTOR, COUNT(*) NLIVROS
  FROM LIVROS
  GROUP BY CODIGO_AUTOR) TAB1;
---------------------------

--EX 4--
SELECT TITULO, PRECO_TABELA, P_MEDIO, PRECO_TABELA - P_MEDIO
FROM LIVROS,( SELECT CODIGO_AUTOR, ROUND(AVG(PRECO_TABELA),2) P_MEDIO
              FROM LIVROS
              GROUP BY CODIGO_AUTOR) TAB1
WHERE LIVROS.CODIGO_AUTOR = TAB1.CODIGO_AUTOR
AND GENERO = 'Informática';

-- modo simples de fazer-- 
SELECT TITULO, PRECO_TABELA, P_MEDIO, PRECO_TABELA - P_MEDIO
FROM LIVROS, (...) TAB1;

SELECT CODIGO_AUTOR, AVG(PRECO_TABELA) P_MEDIO
FROM LIVROS
GROUP BY CODIGO_AUTOR; -- dentro do from 

WHERE LIVROS.CODIGO_AUTOR = TAB1.CODIGO_AUTOR
AND GENERO = 'Informática';
---------------------------

--EX 5--
SELECT TAB1.GENERO ,TITULO, UNIDADES_VENDIDAS
FROM LIVROS, (SELECT GENERO, MAX(UNIDADES_VENDIDAS) MAXIMO
              FROM LIVROS
              GROUP BY GENERO) TAB1
WHERE LIVROS.GENERO = TAB1.GENERO
AND UNIDADES_VENDIDAS = MAXIMO
ORDER BY UNIDADES_VENDIDAS DESC;

-- modo simples de fazer-- 
SELECT TITULO, TAB1.GENERO, UNIDADES_VENDIDAS
FROM LIVROS, (...)TAB1

SELECT GENERO, MAX(UNIDADES_VENDIDAS) MAXIMO
FROM LIVROS
GROUP BY GENERO; -- dentro do from 

WHERE LIVROS.GENERO = TAB1.GENERO
AND UNIDADES_VENDIDAS = MAXIMO 
ORDER BY UNIDADES_VENDIDAS;
---------------------------

--EX 6--
SELECT TITULO, ROUND(UNIDADES_VENDIDAS*100/SUMATORIO, 2) PERCENTAGEM
FROM LIVROS, EDITORAS, (SELECT SUM(UNIDADES_VENDIDAS) SUMATORIO
                        FROM LIVROS, EDITORAS
                        WHERE LIVROS.CODIGO_EDITORA = EDITORAS.CODIGO_EDITORA
                        AND UPPER(EDITORAS.NOME) = 'FCA - EDITORA') 
WHERE LIVROS.CODIGO_EDITORA = EDITORAS.CODIGO_EDITORA
AND UPPER(EDITORAS.NOME) = 'FCA - EDITORA'
ORDER BY 2 DESC;

--EX 7-- 
SELECT TITULO
FROM LIVROS L, VENDAS V, CLIENTES C
WHERE L.CODIGO_LIVRO = V.CODIGO_LIVRO
AND V.CODIGO_CLIENTE = C.CODIGO_CLIENTE
AND MORADA LIKE '%Lisboa'
GROUP BY TITULO
HAVING SUM(QUANTIDADE) = (SELECT MAX(SOMA)S 
                          FROM (SELECT SUM(QUANTIDADE) SOMA
                                FROM LIVROS L, VENDAS V, CLIENTES C
                                WHERE L.CODIGO_LIVRO = V.CODIGO_LIVRO
                                AND V.CODIGO_CLIENTE = C.CODIGO_CLIENTE
                                AND MORADA LIKE '%Lisboa'
                                GROUP BY L.CODIGO_LIVRO) TAB1);
                                

/* FICHA06 */

--EX 1--
SELECT NL "TOTAL DE LIVROS", NA "TOTAL DE AUTORES, NE "TOTAL DE EDITORAS"
FROM (SELECT COUNT (TILTULO) NL
      FROM LIVROS) TL,
      (SELECT COUNT (NOME) NA
      FROM AUTORES) TA,
      (SELECT COUNT (NOME) NE
      FROM EDITORAS) TE;
      
-- modo simples de fazer-- 
SELECT COUNT (TILTULO) FROM LIVROS;
SELECT COUNT (NOME) FROM AUTORES;
SELECT COUNT (NOME) FROM EDITORAS;
---------------------------

--EX 2--
SELECT ' O autor ' || T1.NOME || ' escreveu ' || NL || ' livro(s) e ' || NLFCA || ' sob a alçada da editra FCA-EDITORA '
FROM (SELECT A.NOME, COUNT(CODIGO_LIVRO) AS NL, COUNT(CODIGO_LIVRO) AS NLFCA
      FROM LIVROS L, AUTORES A, EDITORAS E
      WHERE A.CODIGO_AUTOR = L.CODIGO_AUTOR
      AND L.CODIGO_EDITORA = E.CODIGO_EDITORA
      AND E.NOME = 'FCA - EDITORA'
      GROUP BY A.NOME) T1
ORDER BY NOME;

--EX 3--
SELECT TAB1.NOME, TITULO, LIVROS_FCA "LIVROS_FCA", N_LIVROS "TOTAL DE LIVROS"        -- TOTAL DE LIVROS POR ELE ESCRITOS
FROM (SELECT A.NOME, COUNT (L.CODIGO_AUTOR) N_LIVROS
      FROM AUTORES A, LIVROS L
      WHERE A.CODIGO_AUTOR = L.CODIGO_AUTOR
      GROUP BY NOME
      ORDER BY NOME) TAB1,

      (SELECT A.NOME, COUNT(L.CODIGO_AUTOR) LIVROS_FCA             -- QUANTOS ESCREVEU PARA A FCA - EDITORA
      FROM AUTORES A, LIVROS L, EDITORAS E
      WHERE A.CODIGO_AUTOR = L.CODIGO_AUTOR
      AND L.CODIGO_EDITORA = E.CODIGO_EDITORA
      AND E.NOME LIKE '%FCA - EDITORA%'
      GROUP BY A.NOME
      ORDER BY A.NOME) TAB2,
   
    (SELECT A.NOME, L.TITULO                                                    -- O LIVRO MAIS CARO EDITADO PELA FCA - EDITORA
     FROM AUTORES A, LIVROS L, EDITORAS E
     WHERE A.CODIGO_AUTOR = L.CODIGO_AUTOR
     AND E.CODIGO_EDITORA = L.CODIGO_EDITORA
     AND E.NOME = 'FCA - EDITORA'
     AND PRECO_TABELA = (SELECT MAX(PRECO_TABELA)                     
                        FROM LIVROS L, EDITORAS E
                        WHERE L.CODIGO_EDITORA = E.CODIGO_EDITORA
                        AND E.NOME = 'FCA - EDITORA') ) TAB3
WHERE TAB1.NOME = TAB2.NOME
AND TAB1.NOME = TAB3.NOME;

-- EX 4-- 
SELECT DISTINCT TAB1.NOME NOME, NVL(GP,0) "Género Preferido", N_LIVROS "Total de Livros" 
FROM (SELECT AUTORES.NOME , COUNT(LIVROS.CODIGO_AUTOR) N_LIVROS
     FROM AUTORES, LIVROS
     WHERE AUTORES.CODIGO_AUTOR = LIVROS.CODIGO_AUTOR
     GROUP BY AUTORES.NOME) TAB1,
     (SELECT NOME, COUNT(TITULO) GP
     FROM AUTORES, LIVROS
     WHERE AUTORES.CODIGO_AUTOR = LIVROS.CODIGO_AUTOR
     AND AUTORES.GENERO_PREFERIDO = LIVROS.GENERO
     GROUP BY NOME) TAB2
WHERE TAB1.NOME = TAB2.NOME(+)
ORDER BY NOME;

--EX 5--


/* FICHA08 */
--EX 1--
CREATE TABLE AUTORES2 (
  CODIGO_AUTOR NUMBER(4) CONSTRAINT PK_AUTORES2 PRIMARY KEY,
  NOME VARCHAR(30) NOT NULL 
                  CONSTRAINT CK_NOME_MAIS CHECK(NOME=UPPER(NOME)),
  N_CONTRIBUINTE NUMBER (9) NOT NULL CONSTRAINT UK_NIF UNIQUE,
  MORADA VARCHAR (50),
  IDADE NUMBER (4) 
        CONSTRAINT CK_IDADE CHECK(IDADE>0 AND IDADE<200),
  SEXO CHAR (1) CHECK(SEXO IN('F', 'M')),
  NACIONALIDADE VARCHAR (20),
  GENERO_PREFERIDO VARCHAR (20)
  );


--EX 2--
CREATE TABLE AVALIACOES (
  CODIGO_CLIENTE NUMBER (4) ,
  CODIGO_LIVRO NUMBER (4),
  NOTA NUMBER (1) CONSTRAINT CK_NOTA CHECK(NOTA>=1 AND NOTA<=5),
  CONSTRAINT PK_AVALIACOES PRIMARY KEY (CODIGO_LIVRO, CODIGO_CLIENTE),
  CONSTRAINT FK_AVAL_LIVRO FOREIGN KEY (CODIGO_LIVRO) 
                                  REFERENCES LIVROS (CODIGO_LIVRO),
  CONSTRAINT FK_AVAL_CLIENTE FOREIGN KEY (CODIGO_CLIENTE) 
                                  REFERENCES CLIENTES (CODIGO_CLIENTE)
);


--EX 3--
CREATE TABLE LIVROS_BACKUP AS
  SELECT CODIGO_LIVRO,
  CODIGO_EDITORA,
  CODIGO_AUTOR,
  TITULO,
  ISBN,
  UPPER(GENERO) AS GENERO,
  PRECO_TABELA,
  PAGINAS,
  QUANT_EM_STOCK,
  UNIDADES_VENDIDAS,
  DATA_EDICAO
FROM LIVROS ;

--EX 4--
ALTER TABLE LIVROS_BACKUP
     ADD CONSTRAINT PK_LIVRO_BACKUP PRIMARY KEY (CODIGO_LIVRO);
     
ALTER TABLE LIVROS_BACKUP
     ADD CONSTRAINT KEY_LIVBK_AUTORES FOREIGN KEY(CODIGO_AUTOR)
     REFERENCES AUTORES (CODIGO_AUTOR);
     
ALTER TABLE LIVROS_BACKUP
     ADD CONSTRAINT KEY_LIVBK_EDITORAS FOREIGN KEY(CODIGO_EDITORA)
     REFERENCES EDITORAS (CODIGO_EDITORA);
     
ALTER TABLE LIVROS_BACKUP
     ADD CONSTRAINT CK_GENERO_MAIS CHECK(GENERO = UPPER (GENERO));


--EX 5--
INSERT INTO LIVROS_BACKUP VALUES (51, 
                                (SELECT CODIGO_EDITORA FROM EDITORAS WHERE NOME LIKE 'FCA%'),
                                (SELECT CODIGO_AUTOR FROM AUTORES WHERE NOME ='Sérgio Sousa'),
                                  'Informática para todos', 132434, 'INFORMÁTICA', 24, 430, NULL, 0, SYSDATE); 
                                  
--EX 6--
INSERT INTO AUTORES2 VALUES (45, 'JOSÉ DE MAGALHÃES', 77665544, NULL, NULL, NULL, NULL, NULL);
 -- OU --
INSERT INTO AUTORES2 (CODIGO_AUTOR, NOME, N_CONTRIBUINTE)
  VALUES (45, 'JOSÉ DE MAGALHÃES', 77665544);
  
--EX 7--
DELETE FROM LIVROS_BACKUP
WHERE CODIGO_LIVRO = 51;

--EX 8--
UPDATE LIVROS_BACKUP SET PRECO_TABELA = PRECO_tABELA * 1.1
WHERE GENERO = 'AVENTURA';

--EX 9--
DELETE FROM LIVROS_BACKUP
WHERE GENERO = 'INFORMÁTICA'
AND PRECO_TABELA < (SELECT AVG(PRECO_TABELA)
                    FROM LIVROS_BACKUP
                    WHERE GENERO='INFORMÁTICA');

--EX 10-- 
CREATE TABLE AUTORES_BACKUP AS 
  SELECT *
  FROM AUTORES;
  
--EX 11--
ALTER TABLE AUTORES_BACKUP
    ADD CONSTRAINT CK_NLIVROS CHECK (NLIVROS >=0 AND NLIVROS <=150);
    
--- ou ---
ALTER TABLE AUTORES_BACKUP
    ADD (NLIVROS NUMBER DEFAULT 0 NOT NULL);
    
ALTER TABLE AUTORES_BACKUP
    ADD (NLIVROS NUMBER DEFAULT 0 NOT NULL
      CONSTRAINT CK_NLIVROS CHECK (NLIVROS >=0 AND NLIVROS <=150));
      
--EX 12--
UPDATE AUTORES_BACKUP 
      SET NLIVROS = (SELECT COUNT (*) 
                    FROM LIVROS 
                    WHERE CODIGO_AUTOR = AUTORES_BACKUP.CODIGO_AUTOR);
              
--EX 13--
UPDATE AUTORES_BACKUP SET GENERO_PREFERIDO = (
                      SELECT GENERO 
                      FROM LIVROS
                      WHERE LIVROS.CODIGO_AUTOR = AUTORES_BACKUP.CODIGO_AUTOR
                      AND ROWNUM = 1
                      GROUP BY CODIGO_AUTOR, GENERO
                      HAVING (CODIGO_AUTOR, COUNT (*)) IN (
                              SELECT CODIGO_AUTOR, MAX(NLIVROS) AS MAXIMO
                              FROM (SELECT CODIGO_AUTOR, GENERO, COUNT (*) NLIVROS
                                    FROM LIVROS
                                    GROUP BY CODIGO_AUTOR, GENERO)
                      GROUP BY CODIGO_AUTOR));
                      
--EX 14--
CREATE TABLE EDITORAS_BACKUP AS
SELECT *
FROM EDITORAS;

--EX 15--
DROP TABLE EDITORAS_BACKUP;

--ex a--
ALTER TABLE LIVROS_BACKUP
ADD (EDICAO NUMBER(7));

--ex b--
UPDATE LIVROS_BACKUP SET UNIDADES_VENDIDAS = (
                      SELECT SUM(QUANTIDADE)
                      FROM VENDAS 
                      WHERE VENDAS.CODIGO_LIVRO = LIVROS_BACKUP.CODIGO_LIVRO);

--ex d--
CREATE TABLE VENDAS_BACKUP AS
SELECT *
FROM VENDAS;

--ex c--
UPDATE VENDAS_BACKUP 
  SET TOTAL_VENDA = QUANTIDADE*PRECO_UNITARIO;
  
--ex e--
DELETE FROM VENDAS_BACKUP
  WHERE TO_CHAR(DATA_VENDA, 'MM') = '01';
  
--ex f--
DELETE FROM VENDAS_BACKUP 
  WHERE CODIGO_LIVRO IN (SELECT CODIGO_LIVRO
                      FROM LIVROS, AUTORES
                      WHERE LIVROS.CODIGO_AUTOR=AUTORES.CODIGO_AUTOR
                      AND NOME='Sérgio Sousa'
                      AND PRECO_TABELA=(SELECT MAX(PRECO_TABELA)
                                        FROM LIVROS, AUTORES
                                        WHERE LIVROS.CODIGO_AUTOR=AUTORES.CODIGO_AUTOR
                                        AND NOME='Sérgio Sousa'));
                                        

--O TÍTULO DO LIVRO MAIS CARO DE CADA AUTOR--
--OUTPUT: NOME_AUTOR, TITULO
SELECT TITULO, NOME
FROM LIVROS,  AUTORES, (SELECT NOME, MAX(PRECO_TABELA) MAXIMO
                        FROM LIVROS L, AUTORES A
                        WHERE L.CODIGO_AUTOR = A.CODIGO_AUTOR) X
WHERE LIVROS.CODIGO_AUTOR = AUTORES.CODIGO_AUTOR
AND AUTORES.NOME = X.NOME 
AND PRECO_TABELA = X.MAXIMO;


      

/* FICHA 09 */
--EX 1--
Sql> create sequence exp_sequencia; // cria vista
Sql> select exp_sequencia.currval from dual; --imprime 1
Sql> select exp_sequencia.nextval from dual; --imprime 2 
Sql> select exp_sequencia.nextval from dual; --imprime 3
Sql> select exp_sequencia.nextval from dual; --imprime 4
Sql> select exp_sequencia.currval from dual; --imprime 4
Sql> drop sequence exp_sequencia; --apaga a sequencia 2

--EX 2--
CREATE TABLE EDITORAS_BACKUP AS SELECT * 
FROM EDITORAS;

ALTER TABLE EDITORAS_BACKUP
ADD CONSTRAINT PK_EDIT_BACK PRIMARY KEY(CODIGO_EDITORA)
ADD CONSTRAINT UK_NOME_EDITORA UNIQUE(NOME);

--EX 3--
CREATE SEQUENCE seq_editback START WITH 4 INCREMENT BY 1;

--  OU  --
CREATE SEQUENCE seq_editback START WITH 4;
CREATE SEQUENCE seq_editback START WITH 4 INCREMENT BY 1
NOCLYCLE NOMEXVALUE;

--EX 4--
INSERT INTO EDITORAS_BACKUP(CODIGO_EDITORA, NOME, N_CONTRIBUINTE, MORADA, TELEFONE, FAX) VALUES(SEQ_EDITBACK.NEXTVAL,'D.Quixote', 901111111, 'Rua Cidade de Córdova, n.2  2610-038 Alfragide', 707252252, 707252253);
INSERT INTO EDITORAS_BACKUP(CODIGO_EDITORA, NOME, N_CONTRIBUINTE, MORADA, TELEFONE, FAX) VALUES(SEQ_EDITBACK.NEXTVAL,'Almedina', 901212121, 'Rua Fernandes Tomás, n.º 76 a 80, 3000-167 Coimbra', 707252252, 239851904);

ALTER TABLE EDITORAS_BACKUP 
  MODIFY (MORADA VARCHAR(70));
  

--EX 5--
SELECT seq_editback.CURRVAL FROM DUAL;
SELECT seq_editback.NEXTVAL FROM DUAL; 

SELECT seq_editback.CURRVAL FROM DUAL: --confirma o seu valor atual

--SELECT seq_editback.CURRVAL FROM LIVROS;
--SELECT seq_editback.NEXTVAL FROM LIVROS;

--EX 6--    
DROP SEQUENCE seq_editback;

--EX 7--
CREATE VIEW LIVROS_INFORMATICA AS
  SELECT * FROM LIVROS
  WHERE GENERO = 'Informática';
  
--EX 8--
insert into livros_informatica (codigo_livro, titulo, isbn, genero)
values (30,'Uma noite de Verão', 8000000001,'Informática');

insert into livros_informatica (codigo_livro, titulo,isbn, genero)
values (31,'O céu é azul',8000000002,'Romance');

insert into livros (codigo_livro, codigo_editora, codigo_autor,titulo,isbn, genero)
values (32,2, 2,'Longe de tudo',8000000003,'Informática');

--EX 9--
DELETE FROM LIVROS
WHERE CODIGO_LIVRO IN (30, 31, 32);

--EX 10-- 
DROP VIEW LIVROS_INFORMATICA;

--EX 11--
CREATE TABLE LIVROS_BACKUP AS SELECT * FROM LIVROS;

--EX 12--
CREATE VIEW AUTOR_LIVRO AS
        SELECT UPPER(NOME) NOME, UPPER(TITULO) TITULO
        FROM AUTORES, LIVROS_BACKUP
        WHERE AUTORES.CODIGO_AUTOR = LIVROS_BACKUP.CODIGO_AUTOR;
        
--EX 13--
SELECT * FROM AUTOR_LIVRO;

DELETE FROM AUTOR_LIVRO;

SELECT * FROM AUTOR_LIVRO;

--EX 14--
DROP TABLE LIVROS_BACKUP;

--EX 15--
CREATE VIEW LIVROS_VENDIDOS AS 
    SELECT TITULO, AUTORES.NOME, SUM(QUANTIDADE) AS NLIVROS
    FROM LIVROS, AUTORES, VENDAS
    WHERE AUTORES.CODIGO_AUTOR = LIVROS.CODIGO_AUTOR
    AND LIVROS.CODIGO_LIVRO = VENDAS.CODIGO_LIVRO
    GROUP BY TITULO, NOME
    ORDER BY 3 DES;
--EX 16--
